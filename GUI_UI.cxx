// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include "GUI_UI.h"
#include<iostream> // for cout

using namespace std;

// a trick for having a non-static callback...
void GUI_UI::Button_CB(Fl_Widget* flw, void* userdata) {
  Fl_Widget *p = flw;
  while (p->parent()) p = p->parent();
  ((GUI_UI*)p->user_data())->real_callback(flw, userdata);
}

// all main gui callbacks
void GUI_UI::real_callback(Fl_Widget *flw, void *userdata) {

  string str_data = string ( (char*) userdata );
  if ( str_data.compare("mainTab") == 0 ) {
    if (mainTab->value() == loadSaveTab) {
      gridView->viewTabFlag = true;
      gridView->editTabFlag = false;
    } else {
      gridView->editTabFlag = true;
      gridView->viewTabFlag = false;
    }
  }

  if ( gridView->viewTabFlag == true ) { // -----------------------------------------------------------------------------------
    
    // restore/set flags
    gridView->editHighway = false;
    gridView->editObstacle = false;
    gridView->editAgent = false;
    gridView->editRandomAgents = false;
    if (viewSG->value() == 1)
      gridView->displaySG = true;
    else
      gridView->displaySG = false;
    if (viewHeuristic->value() == 1)
      gridView->displayHeuristic = true;
    else
      gridView->displayHeuristic = false;
    if (viewHighway->value() == 1 )
      gridView->displayHighway = true;
    else
      gridView->displayHighway = false;
    if (viewPath->value() == 1)
      gridView->displayPath = true;
    else
      gridView->displayPath = false;
    if (viewCollisions->value() == 1)
      gridView->displayCollisions = true;
    else
      gridView->displayCollisions = false;
    if (viewDirectionMap->value() == 1)
      gridView->displayDirectionMap = true;
    else
      gridView->displayDirectionMap = false;
    if (viewCollisions->value() == 1)
      gridView->displayCollisions = true;
    else
      gridView->displayCollisions = false;

    // if we returned from editing recompute everything and clear HL/AG choices
    if ( str_data.compare("mainTab") == 0 ) {
      gridView->recomputeHeuristic();  // only if possible (in this case, if map or highway changed during edit)
      viewHLNode->clear();
      viewAgentChoice->clear();
      if ( gridView->al != NULL ) {
        for (int ag = 0; ag < (gridView->al)->num_of_agents; ag++) {
          string ag_name = std::to_string(ag);
          viewAgentChoice->add(ag_name.c_str(), 0, 0, 0, 0);
          // add (const char* label, int shortcut, Fl_Callback* callback, void* userdata=0, int flags=0)
        }
        viewAgentChoice->add("ALL", 0, 0, 0, 0);
      }
    }
    
    if ( str_data.compare("browseMapFile") == 0 ) {
      Fl_Native_File_Chooser fnfc;
      fnfc.title("Select Map File");
      fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
      if ( fnfc.show() ) return;
      mapFileName->value( fnfc.filename() );
    } // end if -- browseMapFile
  
    if ( str_data.compare("browseHighwayFile") == 0 ) {
      Fl_Native_File_Chooser fnfc;
      fnfc.title("Select Highway File");
      fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
      if ( fnfc.show() ) return;
      highwayFileName->value( fnfc.filename() );
    }  // end if -- browseHighwayFile

    if ( str_data.compare("browseAgentsFile") == 0 ) {
      Fl_Native_File_Chooser fnfc;
      fnfc.title("Select Agents File");
      fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
      if ( fnfc.show() ) return;
      agentsFileName->value( fnfc.filename() );
    } // end if -- browseAgentswFile
  
    if ( str_data.compare("newMapFileButton") == 0 ) {
      // fl_input: returned pointer is only valid until the next time fltk::input is called. The cancel button returns NULL.
      const char *num_rows = fl_input("Rows:");
      int numRows = atoi(num_rows)+2; // +2 for padding
      const char *num_cols = fl_input("Cols:");
      int numCols = atoi(num_cols)+2; // +2 for padding
      clear_data_structures();
      gridView->ml = new MapLoader(numRows, numCols);
      gridView->al = new AgentsLoader();
      gridView->egr = new EgraphReader();
      (gridView->egr)->nodes.set_empty_key(0);
      (gridView->egr)->nodes.set_deleted_key(-1);
      gridView->hwy_weight = 1.0;
      gridView->ecbs_weight = 1.0;
      viewAgentChoice->clear();
      viewHLNode->clear();
      gridView->agentNum = -1;
    } // end if -- newMapFileButton

    if ( str_data.compare("saveButton") == 0 ) {
      string map_fname = string( mapFileName->value() );
      string agents_fname = string ( agentsFileName->value() );
      string highway_fname = string ( highwayFileName->value() );
      if (gridView->ml != NULL)
	(gridView->ml)->saveToFile(map_fname);
      if (gridView->ml != NULL)
	(gridView->al)->saveToFile(agents_fname);
      if (gridView->egr != NULL)
	(gridView->egr)->saveToFile(highway_fname);
    } // end if -- saveButton

    if ( str_data.compare("loadButton") == 0 ) {
      // load map
      string map_fname = string( mapFileName->value() );
      if (map_fname.empty())
	fl_message("Select a map file first.");
      else {
	clear_data_structures();
	gridView->ml = new MapLoader(map_fname);
      }
      // load agents
      string agents_fname = string( agentsFileName->value() );
      if (agents_fname.empty()) {
        gridView->al = new AgentsLoader();
        viewAgentChoice->clear();
        gridView->agentNum = -1;
        //	fl_message("Select a agents file first.");
      } else {
	gridView->al = new AgentsLoader(agents_fname);
	viewAgentChoice->clear();
	for (int ag=0; ag<(gridView->al)->num_of_agents; ag++) {
	  string ag_name = std::to_string(ag);
	  viewAgentChoice->add( ag_name.c_str() , 0 , 0 , 0 , 0 );
	  // add (const char* label, int shortcut, Fl_Callback* callback, void* userdata=0, int flags=0)
	}
	viewAgentChoice->add( "ALL" , 0 , 0 , 0 , 0 );
      }
      // load highway
      string highway_fname = string ( highwayFileName->value() );
      if (gridView->ml != NULL) {
	if (highway_fname.empty()) {
          gridView->egr = new EgraphReader();
          (gridView->egr)->nodes.set_empty_key(0);
          (gridView->egr)->nodes.set_deleted_key(-1);
	  // fl_message("Note: no highway file selected.");
	} else {
	  gridView->egr = new EgraphReader (highway_fname);
	}
      }
      // read highway weight and compute heuristic if possible
      if ( atof( highwayWeight->value() ) < 1 ) {
	fl_message("Note: no highway weight (>=1) specified.");
      } else {
	gridView->hwy_weight = atof( highwayWeight->value() );
	gridView->recomputeHeuristic(); // only if possible
	viewHLNode->clear();
      }
      // read focal_weight and update the value
      if ( atof(weightECBS->value()) < 1 ) {
        fl_message("Note: no focal weight (>= 1) specified.");
      } else {
        if ( gridView->ecbs_weight != atof(weightECBS->value()) ) {
          gridView->ecbs_weight = atof(weightECBS->value());
          gridView->recomputeHeuristic();  // only if possible
          viewHLNode->clear();
        }
      }
    } // end if -- loadButton
  
    if ( str_data.compare("viewHighway") == 0 ) {
      if (viewHighway->value() == 1 )
	gridView->displayHighway = true;
      else
	gridView->displayHighway = false;
    } // end if -- viewHighway

    if ( str_data.compare("highwayWeight") == 0 ) {
      if ( atof( highwayWeight->value() ) < 1 )
	fl_message("Highway weight should be >= 1.");
      else {
	if (gridView->hwy_weight != atof( highwayWeight->value() ) ) {
	  gridView->hwy_weight = atof( highwayWeight->value() );
	  gridView->recomputeHeuristic(); // only if possible
	  viewHLNode->clear();
	}
      }
    }  // end if -- highwayWeight

    if ( str_data.compare("weightECBS") == 0 ) {
      if ( atof(weightECBS->value()) < 1 ) {
        fl_message("Focal weight should be >= 1.");
      } else {
        if ( gridView->ecbs_weight != atof(weightECBS->value()) ) {
          gridView->ecbs_weight = atof(weightECBS->value());
          gridView->recomputeHeuristic();  // only if possible
          viewHLNode->clear();
        }
      }
    }  // end if -- weightECBS
  
    if ( str_data.compare("viewHeuristic") == 0 ) {
      if (viewHeuristic->value() == 1)
	gridView->displayHeuristic = true;
      else
	gridView->displayHeuristic = false;
    } // end if -- viewHeuristic

    if ( str_data.compare("viewPath") == 0 ) {
      if (viewPath->value() == 1)
	gridView->displayPath = true;
      else
	gridView->displayPath = false;
    } // end if -- viewPath

    if ( str_data.compare("viewDirectionMap") == 0 ) {
      if (viewDirectionMap->value() == 1)
	gridView->displayDirectionMap = true;
      else
	gridView->displayDirectionMap = false;
    } // end if -- viewDirectionMap

    if ( str_data.compare("viewCollisions") == 0 ) {
      if (viewCollisions->value() == 1)
	gridView->displayCollisions = true;
      else
	gridView->displayCollisions = false;
    } // end if -- viewCollisions

    if ( str_data.compare("viewAgentChoice") == 0 ) {
      gridView->agentNum = viewAgentChoice->value();
      // note -- ALL (agents) has the number of al->num_of_agents
    } // end if -- viewAgentChoice

    if ( str_data.compare("solveCBS") == 0 ) {
      gridView->runCBS = true;
      if ( (gridView->cbs_search)->runCBSSearch() == false )
	fl_message("CBS failed to find a solution");
      else {
	viewHLNode->clear();
	for (int i=0; i<(gridView->cbs_search)->num_expanded; i++) {
	  string i_str = std::to_string(i+1);
	  viewHLNode->add( i_str.c_str() , 0 , 0 , 0 , 0 );
	}
      }
    } // end if -- solveCBS

    if ( str_data.compare("solveECBS") == 0 ) {
      gridView->runCBS = false;
      if ( (gridView->ecbs_search)->runECBSSearch() == false ) {
        fl_message("ECBS failed to find a solution");
      } else {
        viewHLNode->clear();
        for (int i=0; i<(int)(gridView->ecbs_search)->HL_num_expanded; i++) {
	  string i_str = std::to_string(i+1);
	  viewHLNode->add( i_str.c_str() , 0 , 0 , 0 , 0 );
	}
      }
    } // end if -- solveECBS


    if ( str_data.compare("viewHLNode") == 0 ) {
      int time_exp = viewHLNode->value() + 1;
      if (gridView->runCBS)  // get paths from CBS or ECBS (depend who was pressed last)
        (gridView->cbs_search)->updatePathsForExpTime(time_exp);
      else
        (gridView->ecbs_search)->updatePathsForExpTime(time_exp);        
    } // end if -- viewHLNode

    if ( str_data.compare("simulatePlans") == 0 ) {
      // calc max_plan_length
      vector < vector<int>* > paths;
      if (gridView->runCBS)
        paths = (gridView->cbs_search)->paths;
      else
        paths = (gridView->ecbs_search)->paths;
      int max_plan_len = -1;
      if ( gridView->agentNum == -1)  // (in case no agent is selected, then "select" all)
        gridView->agentNum = (gridView->al)->num_of_agents;
      if ( gridView->agentNum == (gridView->al)->num_of_agents ) {
	for (int i=0; i<(gridView->al)->num_of_agents; i++)
	  if ( (int)(paths[i])->size() > max_plan_len )
	    max_plan_len = (paths[i])->size();
      } else {
	max_plan_len = (paths[gridView->agentNum])->size();
      }
      gridView->curr_simTimestep = 0;
      gridView->max_simTimestep = max_plan_len;
      Fl::add_timeout( 0.5, GridViewer::Timer_CB, (void*)gridView );
    } // end if -- viewHLNode

    if ( str_data.compare("viewDirectionMap") == 0 ) {
      if (viewDirectionMap->value() == 1 ) {
	if (gridView->dir_map != NULL)
	  delete (gridView->dir_map);
        if (gridView->runCBS)
          gridView->dir_map = new DirectionMap ( *(gridView->ml) , (gridView->cbs_search)->paths );
        else
          gridView->dir_map = new DirectionMap ( *(gridView->ml) , (gridView->ecbs_search)->paths );
	gridView->displayDirectionMap = true;
      } else {
	gridView->displayDirectionMap = false;
      }
    } // end if -- viewDirectionMap
    
  } // end ViewTAB ---------------------------------------------------------------

  if ( gridView->editTabFlag == true ) { // ------------------------------------------------
    //    if ( str_data.compare("mainTab") == 0 ) {
    // restore/set flags
    gridView->displayHeuristic = false;
    gridView->displayPath = false;
    gridView->displaySG = true;
    gridView->displayDirectionMap = false;
    gridView->displayCollisions = false;
    gridView->displayHighway = true;
    
    gridView->editHighway = false;
    gridView->editObstacle = false;
    gridView->editAgent = false;
    gridView->editRandomAgents = false;
    if (editHighway->value() == 1) {
      gridView->editHighway = true;
    }
    if (editObstacle->value() == 1) {
      gridView->editObstacle = true;
    }
    if (editAgent->value() == 1) {
      gridView->editAgent = true;
    }
    if (editRandomAgents->value() == 1) {
      gridView->editRandomAgents = true;
    }

    if ( str_data.compare("editObstacle") == 0 ) {
      if (editObstacle->value() == 1) {
        editHighway->clear();
        editAgent->clear();
        editRandomAgents->clear();
        gridView->editObstacle = true;
        gridView->editHighway = false;
        gridView->editAgent = false;
        gridView->editRandomAgents = false;
        gridView->location_a = -1;
        gridView->location_b = -1;
      } else {
        gridView->editObstacle = false;
        gridView->location_a = -1;
        gridView->location_b = -1;
      }
    }  // end if -- editObstacle


    if ( str_data.compare("editHighway") == 0 ) {
      if (editHighway->value() == 1) {
        editObstacle->clear();
        editAgent->clear();
        editRandomAgents->clear();
        gridView->editObstacle = false;
        gridView->editHighway = true;
        gridView->editAgent = false;
        gridView->editRandomAgents = false;
        gridView->location_a = -1;
        gridView->location_b = -1;
      } else {
        gridView->editHighway = false;
        gridView->location_a = -1;
        gridView->location_b = -1;
      }
    }  // end if -- editHighway

    if ( str_data.compare("editAgent") == 0 ) {
      if (editAgent->value() == 1) {
        editObstacle->clear();
        editHighway->clear();
        editRandomAgents->clear();
        gridView->editObstacle = false;
        gridView->editHighway = false;
        gridView->editAgent = true;
        gridView->editRandomAgents = false;
        gridView->location_a = -1;
        gridView->location_b = -1;
      } else {
        gridView->editAgent = false;
        gridView->location_a = -1;
        gridView->location_b = -1;
      }
    }  // end if -- editAgent

    if ( str_data.compare("editRandomAgents") == 0 ) {
      if (editRandomAgents->value() == 1) {
        editObstacle->clear();
        editHighway->clear();
        editAgent->clear();
        gridView->editObstacle = false;
        gridView->editHighway = false;
        gridView->editAgent = false;
        gridView->editRandomAgents = true;
        gridView->location_a = -1;
        gridView->location_b = -1;
        const char *num_random_agents = fl_input("How many agents would you like to generate?");
        gridView->num_of_agents_to_random_generate = atoi(num_random_agents);
        (gridView->random_start_locs).clear();
        (gridView->random_goal_locs).clear();
      } else {
        gridView->editRandomAgents = false;
        gridView->location_a = -1;
        gridView->location_b = -1;
      }
    }  // end if -- editRandomAgent

    if ( str_data.compare("editCrissCrossHWY") == 0 ) {
      (gridView->egr)->createCrissCrossHWY(gridView->ml);
    }  // end if -- editCrissCrossHWY

  } // end EditTAB ---------------------------------------------------------------
  
  gridView->draw();
  
}

GUI_UI::GUI_UI() {
  { mainWindow = new Fl_Double_Window(1690, 1000, "Liron Cohen (lironcoh@usc.edu) 2015");
    mainWindow->user_data((void*)(this));
    { mainTab = new Fl_Tabs(25, 20, 1230, 195);
      { loadSaveTab = new Fl_Group(30, 35, 1215, 180, "Load/Save");
        { mapFileName = new Fl_File_Input(160, 45, 885, 30, "Map File:");
          mapFileName->callback((Fl_Callback*)Button_CB, (void*)("mapFileName"));
        } // Fl_File_Input* mapFileName
        { highwayFileName = new Fl_File_Input(190, 75, 710, 30, "Highway File:");
          highwayFileName->callback((Fl_Callback*)Button_CB, (void*)("highwayFileName"));
        } // Fl_File_Input* highwayFileName
        { highwayWeight = new Fl_Float_Input(965, 75, 80, 30, "Weight");
          highwayWeight->callback((Fl_Callback*)Button_CB, (void*)("highwayWeight"));
        } // Fl_Input* highwayWeight
        { viewGroup = new Fl_Group(35, 155, 1210, 55, "View");
          viewGroup->box(FL_BORDER_BOX);
          { viewSG = new Fl_Check_Button(185, 170, 25, 25, "S-G");
            viewSG->tooltip("Display start and goal locations");
            viewSG->down_box(FL_DOWN_BOX);
            viewSG->callback((Fl_Callback*)Button_CB, (void*)("viewSG"));
          } // Fl_Check_Button* viewSG
          { viewHighway = new Fl_Check_Button(235, 170, 25, 25, "Highway");
            viewHighway->tooltip("Display Highways");
            viewHighway->down_box(FL_DOWN_BOX);
            viewHighway->callback((Fl_Callback*)Button_CB, (void*)("viewHighway"));
          } // Fl_Check_Button* viewHighway
          { viewHeuristic = new Fl_Check_Button(320, 170, 25, 25, "Heuristic");
            viewHeuristic->tooltip("Display heuristic values (choose agent from dropdown menu)");
            viewHeuristic->down_box(FL_DOWN_BOX);
            viewHeuristic->callback((Fl_Callback*)Button_CB, (void*)("viewHeuristic"));
          } // Fl_Check_Button* viewHeuristic
          { viewAgentChoice = new Fl_Choice(85, 170, 90, 25, "Agent");
            viewAgentChoice->down_box(FL_BORDER_BOX);
            viewAgentChoice->callback((Fl_Callback*)Button_CB, (void*)("viewAgentChoice"));
          } // Fl_Choice* viewAgentChoice
          { viewPath = new Fl_Check_Button(410, 170, 25, 25, "Path");
            viewPath->down_box(FL_DOWN_BOX);
            viewPath->callback((Fl_Callback*)Button_CB, (void*)("viewPath"));
          } // Fl_Check_Button* viewPath
          { viewDirectionMap = new Fl_Check_Button(635, 170, 25, 25, "Direction Map");
            viewDirectionMap->tooltip("Display the direction vector in every cell");
            viewDirectionMap->down_box(FL_DOWN_BOX);
            viewDirectionMap->callback((Fl_Callback*)Button_CB, (void*)("viewDirectionMap"));
          } // Fl_Check_Button* viewDirectionMap
          { simulatePlans = new Fl_Button(1065, 170, 70, 25, "Simulate");
            simulatePlans->callback((Fl_Callback*)Button_CB, (void*)("simulatePlans"));
          } // Fl_Button* simulatePlans
          { viewCollisions = new Fl_Check_Button(760, 170, 25, 25, "Collisions");
            viewCollisions->tooltip("Show number of collisions in every cell");
            viewCollisions->down_box(FL_DOWN_BOX);
            viewCollisions->callback((Fl_Callback*)Button_CB, (void*)("viewCollisions"));
          } // Fl_Check_Button* viewCollisions
	  { solveCBS = new Fl_Button(855, 160, 55, 45, "CBS");
            solveCBS->tooltip("Run the CBS algorithm.");
            solveCBS->callback((Fl_Callback*)Button_CB, (void*)("solveCBS"));
          } // Fl_Button* solveCBS
          { solveECBS = new Fl_Button(915, 160, 55, 45, "ECBS");
            solveECBS->tooltip("Run the ECBS algorithm (with the specified weight).");
            solveECBS->callback((Fl_Callback*)Button_CB, (void*)("solveECBS"));
          } // Fl_Button* solveECBS
          viewGroup->end();
        } // Fl_Group* viewGroup
        { loadButton = new Fl_Button(1130, 45, 55, 90, "Load");
          loadButton->tooltip("Load Problem Instance (Map+Agents+Highway)");
          loadButton->callback((Fl_Callback*)Button_CB, (void*)("loadButton"));
        } // Fl_Button* loadButton
        { saveButton = new Fl_Button(1190, 45, 55, 90, "Save");
          saveButton->tooltip("Load Problem Instance (Map+Agents+Highway)");
          saveButton->callback((Fl_Callback*)Button_CB, (void*)("saveButton"));
        } // Fl_Button* saveButton
        { newMapFileButton = new Fl_Button(1070, 45, 55, 90, "New");
          newMapFileButton->callback((Fl_Callback*)Button_CB, (void*)("newMapFileButton"));
        } // Fl_Button* newMapFileButton
        { browseMapFile = new Fl_Button(30, 45, 60, 25, "Browse");
          browseMapFile->callback((Fl_Callback*)Button_CB, (void*)("browseMapFile"));
        } // Fl_Button* browseMapFile
        { browseHighwayFile = new Fl_Button(30, 75, 60, 25, "Browse");
          browseHighwayFile->callback((Fl_Callback*)Button_CB, (void*)("browseHighwayFile"));
        } // Fl_Button* browseHighwayFile
        { viewHLNode = new Fl_Choice(545, 170, 80, 25, "HL-Node#");
	  viewHLNode->down_box(FL_BORDER_BOX);
          viewHLNode->callback((Fl_Callback*)Button_CB, (void*)("viewHLNode"));
        } // Fl_Input* viewHLNode
        { browseAgentsFile = new Fl_Button(30, 105, 60, 25, "Browse");
          browseAgentsFile->callback((Fl_Callback*)Button_CB, (void*)("browseAgentsFile"));
        } // Fl_Button* browseAgentsFile
        { viewSimSpeed = new Fl_Int_Input(1190, 170, 50, 25, "Speed");
          viewSimSpeed->tooltip("Simulation Speed (ms)");
          viewSimSpeed->callback((Fl_Callback*)Button_CB, (void*)("viewSimSpeed"));
        } // Fl_Input* viewSimSpeed
        { agentsFileName = new Fl_File_Input(180, 105, 865, 30, "Agents File:");
          agentsFileName->callback((Fl_Callback*)Button_CB, (void*)("agentsFileName"));
        } // Fl_File_Input* agentsFileName
	{ weightECBS = new Fl_Float_Input(995, 170, 40, 25, "W");
          weightECBS->tooltip("ECBS(w)");
          weightECBS->callback((Fl_Callback*)Button_CB, (void*)("weightECBS"));
        } // Fl_Input* weightECBS
        loadSaveTab->end();
      } // Fl_Group* loadSaveTab
      { editTab = new Fl_Group(50, 50, 1015, 165, "Edit");
        editTab->hide();
        { editObstacle = new Fl_Check_Button(75, 75, 70, 15, "Obstacles");
          editObstacle->tooltip("Add or remove obstacles.");
          editObstacle->down_box(FL_DOWN_BOX);
          editObstacle->callback((Fl_Callback*)Button_CB, (void*)("editObstacle"));
        } // Fl_Check_Button* editObstacle
        { editHighway = new Fl_Check_Button(170, 75, 70, 15, "Highway");
          editHighway->tooltip("Add or remove highway edges (left or right clicks).");
          editHighway->down_box(FL_DOWN_BOX);
          editHighway->callback((Fl_Callback*)Button_CB, (void*)("editHighway"));
        } // Fl_Check_Button* editHighway
        { editAgent = new Fl_Check_Button(260, 75, 70, 15, "Agent");
          editAgent->tooltip("Remove existing agent (press on its start or goal location) or generate new one (pre\
ss on empty cell).");
          editAgent->down_box(FL_DOWN_BOX);
          editAgent->callback((Fl_Callback*)Button_CB, (void*)("editAgent"));
        } // Fl_Check_Button* editAgent
        { editRandomAgents = new Fl_Check_Button(330, 75, 70, 15, "Random Agents");
          editRandomAgents->tooltip("Generate random start and goal locations for agents.");
          editRandomAgents->down_box(FL_DOWN_BOX);
          editRandomAgents->callback((Fl_Callback*)Button_CB, (void*)("editRandomAgents"));
        } // Fl_Check_Button* editRandomAgents
        { editCrissCrossHWY = new Fl_Check_Button(500, 75, 70, 15, "CrissCross HWY");
          editCrissCrossHWY->tooltip("Generate a criss-cross highway through the entire map.");
          editCrissCrossHWY->down_box(FL_DOWN_BOX);
          editCrissCrossHWY->callback((Fl_Callback*)Button_CB, (void*)("editCrissCrossHWY"));
        } // Fl_Check_Button* editCrissCrossHWY
        editTab->end();
      } // Fl_Group* editTab
      mainTab->end();
      mainTab->callback((Fl_Callback*)Button_CB, (void*)("mainTab"));
    } // Fl_Tabs* mainTab
    { gridViewGroup = new Fl_Group(25, 222, 1630, 762);
      { gridViewBox = new Fl_Box(25, 275, 1000, 545);
      } // Fl_Box* gridViewBox
      { gridView = new GridViewer(25, 222, 1630, 762, "main grid viewer");
        gridView->box(FL_NO_BOX);
        gridView->color(FL_BACKGROUND_COLOR);
        gridView->selection_color(FL_BACKGROUND_COLOR);
        gridView->labeltype(FL_NORMAL_LABEL);
        gridView->labelfont(0);
        gridView->labelsize(14);
        gridView->labelcolor(FL_FOREGROUND_COLOR);
        gridView->align(Fl_Align(FL_ALIGN_CENTER));
        gridView->when(FL_WHEN_RELEASE);
	gridView->viewTabFlag = true;
	gridView->editTabFlag = false;
      } // GridViewer* gridView
      gridViewGroup->end();
    } // Fl_Group* gridViewGroup
    mainWindow->end();
  } // Fl_Double_Window* mainWindow
}


void GUI_UI::clear_data_structures() {
  if (gridView->ml != NULL) {
    delete (gridView->ml);
    gridView->ml = NULL;
  }
  if (gridView->al != NULL) {
    delete (gridView->al);
    gridView->al = NULL;
  }
  if (gridView->egr != NULL) {
    delete(gridView->egr);
    gridView->egr = NULL;
  }
  if (gridView->cbs_search != NULL) {
    delete(gridView->cbs_search);
    gridView->cbs_search = NULL;
  }
  if (gridView->ecbs_search != NULL) {
    delete(gridView->ecbs_search);
    gridView->ecbs_search = NULL;
  }
  if (gridView->dir_map != NULL) {
    delete(gridView->dir_map);
    gridView->dir_map = NULL;
  }
}


void GUI_UI::show(int argc, char **argv) {
  mainWindow->show(argc, argv);
}

GUI_UI::~GUI_UI(){
  clear_data_structures();
}
